{"version":3,"sources":["assets/burger.svg","assets/hotdog.svg","assets/pizza.svg","assets/info.svg","assets/logo.svg","redux/helpers.ts","constants/ActionTypes.ts","redux/modules/order.ts","pages/Home/index.tsx","components/numberSelector/index.tsx","pages/Order/index.tsx","helpers/range.ts","redux/modules/dishes.ts","pages/PickDish/index.tsx","redux/modules/drinks.ts","pages/PickDrinks/index.tsx","pages/Receipt/index.tsx","components/nav/index.tsx","App.tsx","DBConfig.ts","serviceWorker.ts","redux/index.ts","index.tsx"],"names":["module","exports","typedAction","type","payload","initialState","dish","email","drinks","dateTime","numberOfPeople","setOrder","order","addDish","addDrink","drink","removeDrink","setEmail","setDateTime","setNumberOfPeople","HomeScreen","connect","state","dispatch","bindActionCreators","useState","error","setError","history","useHistory","openCursor","useIndexedDB","a","length","evt","cursor","target","result","value","push","continue","gutter","xs","sm","md","lg","xl","flex","className","autoplay","arrows","src","burger","alt","hotdog","pizza","block","onClick","route","placeholder","onChange","e","find","NumberSelector","min","max","label","currentValue","setCurrentValue","newValue","OrderScreen","setLoading","addOrder","add","format","disabledDate","current","moment","isoWeekday","disabledTime","disabledHours","start","end","i","range","splice","concat","onOk","toISOString","showTime","defaultValue","size","disabled","shape","dishes","loading","setDishes","loadDishes","axios","get","then","response","data","meals","DishScreen","currentDish","setCurrentDish","useEffect","justify","align","strMeal","width","strMealThumb","strInstructions","randomize","setDrinks","loadDrinks","DrinksScreen","modalVisible","setModalVisible","modalDrink","setModalDrink","selectedDrinks","setSelectedDrinks","map","key","id","bordered","tagline","info","name","selectedDrink","item","filter","toggleDrinkText","visible","closable","destroyOnClose","onCancel","image_url","description","Receipt","Nav","to","logo","initDB","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","options","unique","path","exact","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fae42c06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger.86f3ed7b.svg\";","module.exports = __webpack_public_path__ + \"static/media/hotdog.ec00cfaf.svg\";","module.exports = __webpack_public_path__ + \"static/media/pizza.086db7ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/info.dc945fa3.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.c8f375f7.svg\";","export function typedAction<T extends string>(type: T): { type: T };\nexport function typedAction<T extends string, P extends any>(\n    type: T,\n    payload: P\n): { type: T; payload: P };\nexport function typedAction(type: string, payload?: any) {\n    return { type, payload };\n}","// drinks\nexport const GET_DRINKS = 'drinks/GET_DRINKS';\n// dishes\nexport const GET_DISHES = 'dishes/GET_DISHES';\n// orders\nexport const SET_ORDER = 'orders/SET_ORDER';\nexport const ADD_DISH = 'orders/ADD_DISH';\nexport const ADD_DRINK = 'orders/ADD_DRINK';\nexport const REMOVE_DRINK = 'order/REMOVE_DRINK';\nexport const SET_EMAIL = 'orders/SET_EMAIL';\nexport const SET_DATETIME = 'orders/SET_DATETIME';\nexport const SET_NUMBEROFPEOPLE = 'orders/SET_NUMBEROFPEOPLE';","import { AnyAction, Dispatch } from 'redux';\nimport { typedAction } from '../helpers';\nimport { Dish } from './dishes';\nimport { Drink } from './drinks';\nimport {\n    ADD_DISH,\n    ADD_DRINK,\n    REMOVE_DRINK,\n    SET_DATETIME,\n    SET_EMAIL,\n    SET_NUMBEROFPEOPLE,\n    SET_ORDER } from '../../constants/ActionTypes';\n\nexport type Order = {\n    dish: Dish | null;\n    email: string;\n    drinks: Drink[];\n    dateTime: string | null;\n    numberOfPeople: number;\n}\n\ntype OrderState = {\n    dish: Dish | null;\n    email: string;\n    drinks: Drink[];\n    dateTime: string | null;\n    numberOfPeople: number;\n}\n\nconst initialState: OrderState = {\n    dish: null,\n    email: '',\n    drinks: [],\n    dateTime: null,\n    numberOfPeople: 1,\n};\nconst setOrder = (order: Order) => {\n    return typedAction(SET_ORDER, { order });\n};\nconst addDish = (dish: Dish) => {\n    return typedAction(ADD_DISH, { dish });\n};\nconst addDrink = (drink: Drink) => {\n   return typedAction(ADD_DRINK, { drink });\n};\nconst removeDrink = (drink: Drink) => {\n    return typedAction(REMOVE_DRINK, { drink });\n};\nconst setEmail = (email: string) => {\n    return typedAction(SET_EMAIL, { email });\n};\nconst setDateTime = (dateTime: string) => {\n    return typedAction(SET_DATETIME, { dateTime });\n};\nconst setNumberOfPeople = (numberOfPeople: number) => {\n    return typedAction(SET_NUMBEROFPEOPLE, { numberOfPeople });\n};\n\nexport { setOrder, addDish, addDrink, removeDrink, setEmail, setDateTime, setNumberOfPeople };\n\ntype OrderAction = ReturnType<typeof setOrder | typeof addDish | typeof addDrink | typeof setEmail | typeof setDateTime | typeof setNumberOfPeople>;\n\nexport function orderReducer(\n    state: OrderState = initialState,\n    action: OrderAction\n): OrderState {\n    switch (action.type) {\n        case SET_ORDER:\n            return {\n                ...action.payload.order,\n            };\n        case ADD_DISH:\n            return {\n                ...state,\n                dish: action.payload.dish\n            }\n        case ADD_DRINK:\n            return {\n                ...state,\n                drinks: [...state.drinks, action.payload.drink]\n            };\n        case SET_DATETIME:\n            return {\n                ...state,\n                dateTime: action.payload.dateTime\n            };\n        case SET_EMAIL:\n            return {\n                ...state,\n                email: action.payload.email\n            };\n        case SET_NUMBEROFPEOPLE:\n            return {\n                ...state,\n                numberOfPeople: action.payload.numberOfPeople\n            };\n        default:\n            return state;\n    }\n}","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { Row, Col, Button, Carousel, Input } from 'antd';\nimport { useIndexedDB } from 'react-indexed-db';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { setOrder } from '../../redux/modules/order';\nimport burger from '../../assets/burger.svg';\nimport hotdog from '../../assets/hotdog.svg';\nimport pizza from '../../assets/pizza.svg';\nimport './home.scss';\nimport {RootState} from \"../../redux\";\n\nconst mapStateToProps = (state: RootState) => ({ order: state.order });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators( { setOrder }, dispatch );\n}\n\ntype Props = ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>;\n\nconst Home: React.FC<Props> = ({ setOrder, order }) => {\n    const [email, setEmail] = useState('');\n    const [error, setError] = useState<string | null>(null);\n\n    const history = useHistory();\n    const { openCursor } = useIndexedDB('orders');\n\n    async function find() {\n        if (email.length === 0) {\n            return;\n        }\n        // open object store cursor & iterate to find the matching entry\n        await openCursor((evt: any) => {\n            const cursor: any = evt.target.result;\n            if (cursor) {\n                if (cursor.value.email === email) {\n                    setOrder(cursor.value);\n                    history.push('dish');\n                } else {\n                    cursor.continue();\n                }\n            } else {\n                // iterated through all entries\n                setError('Order not found');\n            }\n        });\n    }\n\n    function goTo(route: string) {\n        history.push(route);\n    }\n\n    return (\n        <>\n            <Row gutter={[{ xs: 4, sm: 8, md: 16, lg: 24 }, { xs: 4, sm: 8, md: 16, lg: 24 }]}>\n                <Col xl={18} lg={18} md={18} sm={24} xs={24} flex=\"stretch\">\n                    <div className=\"container border\">\n                        <Carousel autoplay={true} arrows={true}>\n                            <div>\n                                <img className=\"\" src={burger} alt=\"burger-menu\"/>\n                            </div>\n                            <div>\n                                <img className=\"\" src={hotdog} alt=\"hotdog-menu\"/>\n                            </div>\n                            <div>\n                                <img className=\"\" src={pizza} alt=\"pizza-menu\"/>\n                            </div>\n                        </Carousel>\n                    </div>\n                </Col>\n                <Col xl={6} lg={6} md={6} sm={24} xs={24} flex=\"stretch\">\n                    <div className=\"container border\">\n                        <p className=\"uppercase bold\">new order</p>\n                        <Button className=\"uppercase\" type=\"primary\" block={true} onClick={() => goTo('dish')}>\n                            Order\n                        </Button>\n                    </div>\n                </Col>\n            </Row>\n            <Row gutter={{ xs: 4, sm: 8, md: 16, lg: 24 }}>\n                <Col xl={12} lg={12} md={12} sm={24} xs={24}>\n                    <div className=\"container border\">\n                        <p className=\"uppercase bold\">find your order</p>\n                        <Input type=\"email\" placeholder=\"Email\" onChange={(e) => setEmail(e.target.value)} />\n                        <Button className=\"uppercase\" type=\"primary\" block={true} onClick={() => find()}>find</Button>\n                        {\n                            error && <p className=\"uppercase error\">{error}</p>\n                        }\n                    </div>\n                </Col>\n                <Col xl={12} lg={12} md={12} sm={24} xs={24}>\n                    <div className=\"container border\">\n                        <p className=\"uppercase\">lorem ipsum</p>\n                    </div>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nconst HomeScreen = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\nexport default HomeScreen;","import React, { useState } from 'react';\nimport './numberSelector.scss';\n\ntype NumberSelectorProps = {\n    min: number,\n    max: number,\n    label: string,\n    value?: number,\n    onChange?: (value: number) => void\n};\n\nconst NumberSelector = ({ min, max, label, value = 1, onChange = (() => {}) }: NumberSelectorProps) => {\n    const [currentValue, setCurrentValue] = useState(value);\n\n    function decrement() {\n        if (currentValue === min) return;\n        const newValue = currentValue - 1;\n        setCurrentValue(newValue);\n        onChange(newValue);\n    }\n    function increment() {\n        if (currentValue === max) return;\n        const newValue = currentValue + 1;\n        setCurrentValue(newValue);\n        onChange(newValue);\n    }\n    return (\n        <div className=\"number-selector\">\n            <p className=\"label uppercase text-center\">{label}</p>\n            <div className=\"selector\">\n                <div className=\"left\" onClick={decrement} />\n                <div className=\"value\">{currentValue}</div>\n                <div className=\"right\" onClick={increment} />\n            </div>\n        </div>\n    );\n}\n\nexport default NumberSelector;","import React, { useState } from 'react';\nimport moment, { Moment } from 'moment';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { Button, Col, Row, DatePicker, Input } from 'antd';\nimport { useIndexedDB } from 'react-indexed-db';\nimport { RootState } from '../../redux';\nimport { setDateTime, setEmail, setNumberOfPeople } from '../../redux/modules/order';\nimport range from '../../helpers/range';\nimport NumberSelector from '../../components/numberSelector';\n\nconst mapStateToProps = (state: RootState) => ({ order: state.order });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators(\n        {\n            setEmail,\n            setDateTime,\n            setNumberOfPeople\n        },\n        dispatch\n    );\n};\n\ntype Props = ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>;\n\nconst Order: React.FC<Props> = ({ setEmail, setDateTime, setNumberOfPeople, order }) => {\n    const [loading, setLoading] = useState(false);\n    const { add: addOrder } = useIndexedDB('orders');\n\n    function disabledDate(current: Moment): boolean {\n        // Cannot select days before today or if day is during the weekend\n        return current && current < moment() || current.isoWeekday() === 6 || current.isoWeekday() === 7;\n    }\n    function disabledDateTime() {\n        // Cannot select hours before 16 or after 23\n        return {\n            disabledHours: () => range(0, 24).splice(0, 16).concat([23, 24])\n        };\n    }\n    function onOk(value: any) {\n        setDateTime(value.toISOString());\n    }\n    function isDisabled(): boolean {\n        return order.email.length === 0 || order.dateTime === null\n    }\n    async function proceedOrder() {\n        setLoading(true);\n        await addOrder(order);\n        setLoading(false);\n    }\n\n    return (\n        <>\n            <Row gutter={[{ xs: 4, sm: 8, md: 16, lg: 24 }, { xs: 4, sm: 8, md: 16, lg: 24 }]}>\n                <Col xs={24}>\n                    <div className=\"container border\">\n                        <h2 className=\"uppercase bold\">Your order</h2>\n                        <Row gutter={[{ xs: 4, sm: 8, md: 16, lg: 24 }, { xs: 4, sm: 8, md: 16, lg: 24 }]}>\n                            <Col xl={6} lg={6} md={6} sm={24} xs={24}>\n                                <div className=\"order-calendar\">\n                                    <p className=\"uppercase no-margin\">Pick date and time</p>\n                                    <DatePicker\n                                        format=\"YYYY-MM-DD HH:mm\"\n                                        disabledDate={disabledDate}\n                                        disabledTime={disabledDateTime}\n                                        onOk={onOk}\n                                        showTime={{ defaultValue: moment('00:00', 'HH:mm') }}\n                                    />\n                                </div>\n                            </Col>\n                            <Col xl={12} lg={12} md={12} sm={24} xs={24}>\n                                <NumberSelector\n                                    min={1}\n                                    max={10}\n                                    label=\"Select amount of people\"\n                                    value={1}\n                                    onChange={(value: number) => setNumberOfPeople(value)}\n                                />\n                                <p className=\"uppercase\">Enter email</p>\n                                <Input type=\"email\" size=\"large\" placeholder=\"email\" value={order.email} onChange={e => setEmail(e.target.value)} />\n                            </Col>\n                            <Col xl={6} lg={6} md={6} sm={24} xs={24}>\n                                <Button disabled={isDisabled()} className=\"uppercase\" shape=\"round\" type=\"primary\" block={true} onClick={proceedOrder}>\n                                    Order\n                                </Button>\n                            </Col>\n                        </Row>\n                    </div>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nconst OrderScreen = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Order);\n\nexport default OrderScreen;","export default function range(start: number, end: number) {\n    const result = [];\n    for (let i = start; i < end; i++) {\n        result.push(i);\n    }\n    return result;\n}","import { AnyAction, Dispatch } from 'redux';\nimport axios from 'axios';\nimport { typedAction } from '../helpers';\nimport { GET_DISHES } from '../../constants/ActionTypes';\n\nexport type Dish = {\n    idMeal: number,\n    strMeal: string,\n    strMealThumb: string,\n    strInstructions: string\n};\n\ntype DishesState = {\n    dishes: Dish[],\n    loading: boolean\n};\n\nconst initialState: DishesState = {\n    dishes: [],\n    loading: false\n};\n\nconst setDishes = (dishes: Dish[]) => {\n    return typedAction(GET_DISHES, dishes);\n};\nexport { setDishes };\n\nexport const loadDishes = () => {\n    return async (dispatch: Dispatch<AnyAction>) => {\n        const dishes: Dish[] = await axios.get('https://www.themealdb.com/api/json/v1/1/random.php')\n            .then((response: any) => response.data.meals);\n        dispatch(setDishes(dishes));\n    }\n};\n\ntype DishesAction = ReturnType<typeof setDishes>;\n\nexport function dishesReducer(\n    state: DishesState = initialState,\n    action: DishesAction\n): DishesState {\n    switch (action.type) {\n        case GET_DISHES:\n            return {\n                ...state,\n                dishes: [...state.dishes, ...action.payload]\n            }\n        default:\n            return state;\n    }\n}","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { Button, Col, Row, Divider } from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport { RootState } from '../../redux';\nimport { loadDishes } from '../../redux/modules/dishes';\nimport { addDish } from '../../redux/modules/order';\n\nconst mapStateToProps = (state: RootState) => ({ dishes: state.dishes, order: state.order });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators(\n        {\n            loadDishes,\n            addDish\n        },\n        dispatch\n    );\n};\n\ntype Props = ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>;\n\nconst PickDish: React.FC<Props> = ({ addDish, loadDishes, dishes, order }) => {\n    const [currentDish, setCurrentDish] = useState(dishes.dishes[0]);\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!order.dish && !dishes.loading && dishes.dishes.length === 0) {\n            loadDishes();\n        } else if(order.dish) {\n            setCurrentDish(order.dish);\n        } else {\n            setCurrentDish(dishes.dishes[0]);\n        }\n    }, [loadDishes, dishes]);\n\n    async function randomize() {\n        await loadDishes();\n        setCurrentDish(dishes.dishes[0]);\n    }\n    function proceedOrder() {\n        setLoading(true);\n        addDish(currentDish);\n        history.push('drinks')\n        setLoading(false);\n    }\n    return (\n        <>\n            <Row gutter={{ xs: 4, sm: 8, md: 16, lg: 24 }}>\n                <Col xl={18} lg={18} md={18} sm={24} xs={24}>\n                    <div className=\"container border\">\n                        {\n                            currentDish &&\n                            <>\n                                <Row gutter={{ xs: 4, sm: 8, md: 16, lg: 24 }} justify=\"space-around\" align=\"middle\">\n                                    <Col xl={20} lg={20} md={20} sm={18} xs={18}>\n                                        <h2 className=\"uppercase\">{currentDish.strMeal}</h2>\n                                    </Col>\n                                    <Col xl={4} lg={4} md={4} sm={6} xs={6}>\n                                        <img width=\"100%\" src={currentDish.strMealThumb} alt={currentDish.strMeal}/>\n                                    </Col>\n                                </Row>\n                                <Divider />\n                                <p className=\"uppercase no-margin\">{currentDish.strInstructions}</p>\n                            </>\n                        }\n                    </div>\n                </Col>\n                <Col xl={6} lg={6} md={6} sm={24} xs={24}>\n                    <div className=\"container border\">\n                        <p className=\"uppercase bold\">{currentDish && currentDish.strMeal}</p>\n                        <p className=\"uppercase\">Pick some drinks next!</p>\n                        <Button className=\"uppercase\" loading={loading} shape=\"round\" type=\"primary\" block={true} onClick={() => proceedOrder()}>\n                            Next\n                        </Button>\n                    </div>\n                </Col>\n            </Row>\n            <Button className=\"uppercase margin--top\" shape=\"round\" type=\"primary\" onClick={() => randomize()}>\n                Generate new dish\n            </Button>\n        </>\n    );\n}\n\nconst DishScreen = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PickDish);\n\nexport default DishScreen;","import { AnyAction, Dispatch } from 'redux';\nimport axios from 'axios';\nimport { typedAction } from '../helpers';\nimport { GET_DRINKS } from '../../constants/ActionTypes';\n\nexport type Drink = {\n    id: number,\n    name: string,\n    tagline: string,\n    description: string,\n    image_url: string\n};\n\ntype DrinksState = {\n    drinks: Drink[];\n    loading: boolean;\n};\n\nconst initialState: DrinksState = {\n    drinks: [],\n    loading: false\n};\n\nconst setDrinks = (drinks: Drink[]) => {\n    return typedAction(GET_DRINKS, drinks);\n};\nexport { setDrinks };\n\nexport const loadDrinks = () => {\n    return async (dispatch: Dispatch<AnyAction>) => {\n        const drinks: Drink[] = await axios.get('https://api.punkapi.com/v2/beers')\n            .then((response: any) => response.data);\n        dispatch(setDrinks(drinks));\n    };\n};\n\ntype DrinksAction = ReturnType<typeof setDrinks>;\n\nexport function drinksReducer(\n    state: DrinksState = initialState,\n    action: DrinksAction\n): DrinksState {\n    switch (action.type) {\n        case GET_DRINKS:\n            return {\n                ...state,\n                drinks: [...state.drinks, ...action.payload]\n            };\n        default:\n            return state;\n    }\n}","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport {Button, Col, Row, Card, Modal, Divider} from 'antd';\nimport { RootState } from '../../redux';\nimport { Drink, loadDrinks } from '../../redux/modules/drinks';\nimport { addDrink, removeDrink } from '../../redux/modules/order';\nimport info from '../../assets/info.svg';\nimport './drinks.scss';\n\nconst mapStateToProps = (state: RootState) => ({ drinks: state.drinks, order: state.order });\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators(\n        {\n            addDrink,\n            removeDrink,\n            loadDrinks,\n        },\n        dispatch\n    );\n};\n\ntype Props = ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps>;\n\nconst PickDrinks: React.FC<Props> = ({ addDrink, removeDrink, loadDrinks, drinks, order}) => {\n    const [loading, setLoading] = useState(false);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [modalDrink, setModalDrink] = useState<Drink>();\n    const [selectedDrinks, setSelectedDrinks] = useState<Drink[]>([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (!drinks.loading && drinks.drinks.length === 0) {\n            loadDrinks();\n        }\n        if (order.drinks) {\n            setSelectedDrinks(order.drinks);\n        }\n    }, [loadDrinks, drinks]);\n\n    function toggleDrink(selectedDrink: Drink) {\n        const existingDrink = selectedDrinks.find(item => item.id === selectedDrink.id);\n        if (existingDrink) {\n            setSelectedDrinks(selectedDrinks.filter((drink: Drink) => drink.id !== selectedDrink.id));\n            removeDrink(selectedDrink);\n        } else {\n            setSelectedDrinks(selectedDrinks.concat([selectedDrink]));\n            addDrink(selectedDrink);\n        }\n    }\n\n    function proceedOrder() {\n        setLoading(true);\n        history.push('order');\n        setLoading(false);\n    }\n\n    const toggleDrinkText = (drink: Drink) => {\n        if (selectedDrinks.find(item => item.id === drink.id)) {\n            return 'Remove drink'\n        }\n        return 'Add drink';\n    }\n\n    return (\n        <>\n            <Row gutter={[{ xs: 4, sm: 8, md: 16, lg: 24 }, { xs: 4, sm: 8, md: 16, lg: 24 }]}>\n                <Col xl={18} lg={18} md={18} sm={24} xs={24}>\n                    <div className=\"container border\">\n                        <Row gutter={[{ xs: 4, sm: 8, md: 16, lg: 24 }, { xs: 4, sm: 8, md: 16, lg: 24 }]}>\n                            {drinks.drinks.map((drink: Drink) => (\n                                <Col xl={12} lg={12} md={12} sm={24} xs={24} flex=\"stretch\" key={drink.id}>\n                                    <Card className=\"drink-item\" bordered={false}>\n                                        <Row gutter={{ xs: 4, sm: 8, md: 16, lg: 24 }} justify=\"space-around\" align=\"middle\">\n                                            <Col xl={20} lg={20} md={20} sm={18} xs={18}>\n                                                <p className=\"uppercase bold\"><i>{drink.tagline}</i></p>\n                                            </Col>\n                                            <Col xl={4} lg={4} md={4} sm={6} xs={6}>\n                                                <img className=\"drink-item__info\" src={info} alt=\"see more\" onClick={() => {\n                                                    setModalDrink(drink);\n                                                    setModalVisible(true);\n                                                }}/>\n                                            </Col>\n                                        </Row>\n                                        <p className=\"uppercase drink-item__name\">{drink.name}</p>\n                                        <Button className=\"uppercase\" type=\"primary\" block={true} onClick={() => toggleDrink(drink)}>\n                                            {toggleDrinkText(drink)}\n                                        </Button>\n                                    </Card>\n                                </Col>\n                            ))}\n                        </Row>\n                    </div>\n                </Col>\n                <Col xl={6} lg={6} md={6} sm={24} xs={24}>\n                    <div className=\"container border\">\n                        {selectedDrinks.map((drink: Drink) => (\n                            <p className=\"uppercase no-margin\" key={drink.id}>{drink.name}</p>\n                        ))}\n                        {selectedDrinks.length > 0 && <Divider />}\n                        <p className=\"uppercase\">Pick delivery date next!</p>\n                        <Button disabled={selectedDrinks.length < 1} className=\"uppercase\" loading={loading} shape=\"round\" type=\"primary\" block={true} onClick={() => proceedOrder()}>\n                            Next\n                        </Button>\n                    </div>\n                </Col>\n            </Row>\n            <Modal visible={modalVisible} closable={true} destroyOnClose={true} onCancel={() => setModalVisible(false)}>\n                {\n                    modalDrink &&\n                    <>\n                        <h2 className=\"uppercase bold\">{modalDrink.name}</h2>\n                        <p className=\"uppercase\"><i>{modalDrink.tagline}</i></p>\n                        <img src={modalDrink.image_url} alt={modalDrink.name} />\n                        <p className=\"uppercase\">{modalDrink.description}</p>\n                    </>\n                }\n            </Modal>\n        </>\n    );\n}\n\nconst DrinksScreen = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PickDrinks);\n\nexport default DrinksScreen;","import React from 'react';\n\nconst Receipt = () => {\n    return <div>Receipt</div>\n}\n\nexport default Receipt;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../../assets/logo.svg';\nimport './nav.scss';\n\nconst Nav = () => {\n    return (\n        <div className=\"nav\">\n            <Link to=\"/\"><img className=\"logo\" src={logo} alt=\"logo\"/></Link>\n            <Link className=\"menu-item\" to=\"/\">restaurants</Link>\n            <Link className=\"menu-item\" to=\"/\">products</Link>\n            <Link className=\"menu-item\" to=\"/\">newsletter</Link>\n            <Link className=\"menu-item\" to=\"/\">contact</Link>\n        </div>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom';\nimport { Switch, Route } from \"react-router\";\nimport './App.scss';\nimport { Receipt } from \"./pages/\";\nimport Nav from './components/nav';\nimport HomeScreen from './pages/Home';\nimport DrinksScreen from \"./pages/PickDrinks\";\nimport OrderScreen from \"./pages/Order\";\nimport DishScreen from './pages/PickDish';\nimport { RootState } from \"./redux\";\nimport { connect } from 'react-redux';\nimport { initDB } from 'react-indexed-db';\nimport { DBConfig } from './DBConfig';\n\nconst mapStateToProps = (state: RootState) => ({ order: state.order });\ntype Props = ReturnType<typeof mapStateToProps>\n\ninitDB(DBConfig)\n\nconst App: React.FC<Props> = ({ order }) => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact><HomeScreen /></Route>\n          <Route path=\"/dish\" component={DishScreen} />\n          <Route path=\"/drinks\" component={DrinksScreen} />\n          <Route path=\"/order\" component={OrderScreen} />\n          <Route path=\"/receipt\" component={Receipt} />\n        </Switch>\n      </Router>\n      <div>\n        <p>your order:</p>\n        <p>drinks:</p>\n        {order.drinks.map(drink =>\n            <p key={drink.id}>{drink.name}</p>\n        )}\n        <p>dish: {order.dish?.strMeal}</p>\n        <p>delivery: {order.dateTime}</p>\n        <p>number of people: {order.numberOfPeople}</p>\n        <p>email: {order.email}</p>\n      </div>\n      {/*\n      debug view order from store\n      <div>\n        <p>your order:</p>\n        <p>drinks:</p>\n        {order.drinks.map(drink =>\n            <p key={drink.id}>{drink.name}</p>\n        )}\n        <p>dish: {order.dish?.strMeal}</p>\n        <p>delivery: {order.dateTime}</p>\n        <p>number of people: {order.numberOfPeople}</p>\n        <p>email: {order.email}</p>\n      </div>\n      */}\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps)(App);\n","export const DBConfig = {\n    name: 'SundownDB',\n    version: 1,\n    objectStoresMeta: [\n        {\n            store: 'orders',\n            storeConfig: { keyPath: 'email', autoIncrement: false },\n            storeSchema: [\n                { name: 'email', keypath: 'email', options: { unique: false } },\n                { name: 'dateTime', keypath: 'dateTime', options: { unique: false } },\n                { name: 'numberOfPeople', keypath: 'numberOfPeople', options: { unique: false } },\n                { name: 'dish', keypath: 'dish', options: { unique: false } },\n                { name: 'drinks', keypath: 'drinks', options: { unique: false } }\n            ]\n        },\n        /*{\n            store: 'dishes',\n            storeConfig: { keyPath: 'idMeal' },\n            storeSchema: [\n                { name: 'strMeal', keypath: 'strMeal', options: { unique: false } },\n                { name: 'strMealThumb', keypath: 'strMealThumb', options: { unique: false } },\n                { name: 'strInstructions', keypath: 'strInstructions', options: { unique: false } }\n            ]\n        },\n        {\n            store: 'drinks',\n            storeConfig: { keyPath: 'id' },\n            storeSchema: [\n                { name: 'name', keypath: 'name', options: { unique: false } },\n                { name: 'tagline', keypath: 'tagline', options: { unique: false } },\n                { name: 'description', keypath: 'description', options: { unique: false } },\n                { name: 'image_url', keypath: 'image_url', options: { unique: false } }\n            ]\n        }*/\n    ]\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { drinksReducer } from './modules/drinks';\nimport { dishesReducer } from './modules/dishes';\nimport { orderReducer } from './modules/order';\n\nexport const rootReducer = combineReducers({\n    drinks: drinksReducer,\n    dishes: dishesReducer,\n    order: orderReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { rootReducer } from './redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}